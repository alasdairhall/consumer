import org.apache.tools.ant.taskdefs.condition.Os


pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}

def getStringFromSecureStorage(String account, String service) {
    if (Os.isFamily(Os.FAMILY_MAC)) {
        def stdout = new ByteArrayOutputStream()
        def stderr = new ByteArrayOutputStream()
        def executable = 'security'
        def arguments = ['-q', 'find-generic-password', '-a', account, '-s', service, '-w']
        exec {
            commandLine executable
            args arguments
            standardOutput = stdout
            errorOutput = stderr
            ignoreExitValue true
        }
        //noinspection GroovyAssignabilityCheck
        return stdout.toString().trim()
    } else {
        return null
    }
}

private Properties getKeystoreProperties() {
    def keystorePropertiesFile = new File(gradle.gradleUserHomeDir, "dice_keystore.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    keystoreProperties
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven {
            url = uri("https://maven.pkg.github.com/alasdairhall/module")
            credentials {
                def keystoreProperties = getKeystoreProperties()
                def user = keystoreProperties.getProperty("gpr.user")
                def service = keystoreProperties.getProperty("gpr.service")
                username = user ?: System.getenv("PACKAGES_ACCESS_USER")
                password = getStringFromSecureStorage(user, service) ?: System.getenv("PACKAGES_ACCESS_TOKEN")
            }
        }
    }
}

rootProject.name = "ConsumerTest"
include ':app'
